name: Integration Tests

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
    branches:
      - master
  pull_request:
  schedule:
    - cron: "0 1 * * *"

env:
  redis_stack_version: 6.2.6-v6

jobs:
  build_and_Test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: .NET Core 6
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
      - name: .NET Core 7
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '7.0.x'
      - name: run redis-stack-server docker
        run: docker run -p 6379:6379 -d redis/redis-stack-server:edge
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: |
          dotnet build --no-restore /p:ContinuousIntegrationBuild=true
      - name: dotnet 6.0 test
        run: dotnet test -f net6.0 --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
      - name: dotnet 7.0 test
        run: dotnet test -f net7.0 --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          verbose: true

      - name: determine if in fork
        id: iamafork
        run: |
          amfork=`jq '.pull_request.head.repo.fork' $GITHUB_EVENT_PATH`
          echo "am I fork: ${amfork}"
          echo "IAMAFORK=$amfork" >> $GITHUB_OUTPUT

      - name: Build the package
        run: |
          dotnet pack -c release --output .

      - name: sign
        run: |
          echo "${{secrets.REDIS_PFX_CERT}}" > b64base
          cat b64base | base64 --decode > cert.pfx
          dotnet nuget sign *.nupkg --certificate-path cert.pfx --certificate-password ${{secrets.REDIS_PFX_PASSWORD}}

  build_and_test_windows:
    name: Build and Test on Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Vampire/setup-wsl@v2
        with:
          distribution: Ubuntu-22.04
      - name: Install Redis
        shell: wsl-bash {0}
        run: |
          sudo apt-get update
          sudo apt-get install curl -y && sudo apt-get install gpg -y && apt-get install lsb-release -y && apt-get install libgomp1 -y
          curl https://packages.redis.io/redis-stack/redis-stack-server-${{env.redis_stack_version}}.jammy.x86_64.tar.gz -o redis-stack.tar.gz
          tar xf redis-stack.tar.gz
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore /p:ContinuousIntegrationBuild=true
      - name: Test
        shell: cmd
        run: |
          START wsl ./redis-stack-server-${{env.redis_stack_version}}/bin/redis-stack-server &
          dotnet test -f net481 --no-build --verbosity normal

